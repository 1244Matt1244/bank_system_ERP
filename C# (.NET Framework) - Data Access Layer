using System.Data.Entity;

public class BankSystemContext : DbContext
{
    public BankSystemContext() : base("name=BankSystemContext")
    {
    }

    public DbSet<Customer> Customers { get; set; }
    public DbSet<Transaction> Transactions { get; set; }
}

public interface IGenericRepository<T> where T : class
{
    IEnumerable<T> GetAll();
    T GetById(int id);
    void Insert(T entity);
    void Update(T entity);
    void Delete(int id);
    void Save();
}

public class GenericRepository<T> : IGenericRepository<T> where T : class
{
    private readonly BankSystemContext _context;
    private readonly DbSet<T> _dbSet;

    public GenericRepository(BankSystemContext context)
    {
        _context = context;
        _dbSet = _context.Set<T>();
    }

    public IEnumerable<T> GetAll()
    {
        return _dbSet.ToList();
    }

    public T GetById(int id)
    {
        return _dbSet.Find(id);
    }

    public void Insert(T entity)
    {
        _dbSet.Add(entity);
    }

    public void Update(T entity)
    {
        _context.Entry(entity).State = EntityState.Modified;
    }

    public void Delete(int id)
    {
        var entity = _dbSet.Find(id);
        if (entity != null)
        {
            _dbSet.Remove(entity);
        }
    }

    public void Save()
    {
        _context.SaveChanges();
    }
}
